---
# Copyright (C) 2009, Progress Software Corporation and/or its
# subsidiaries or affiliates.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: Eventing
in_menu: false
--- name:content pipeline:haml,tags
%center
:markdown

  By now you've already figured out how to setup an [Embedded MeshKeeper environment][1], or perhaps
  you have even set up [Remote Launch Servers and Agents][2], and have [Launched Some Processes][3]. Now
  you want to figure out how to coordinate the activities of the code you've got running everywhere. 
  The [`MeshKeeper.Eventing`][4] api can help!
  
  The eventing api is fairly straightforward. The eventing space is a hierarchal (very much like
  a hierarchical pub/sub JMS. You can create [`MeshEventListener`][5]s on a given topic to listen
  for events from other entities in the mesh, and use the [`MeshKeeper.Eventing`][4] api to send events. 
  
  Let's look at a simple HelloWorld application that shows two MeshContainers communicating with
  each other and a test controller using eventing. In this example we distribute two `Greeter` 
  objects to two host containers, and start them listening on an event topic using wildcards. 
  Once the `Greeter`s are started, the controller sends a `SAY_HELLO` which cause the `Greeter`s
  to send a `HELLO` event that the `Greeter`s and controller get:
    
  [1]: {relocatable:/documentation/embedded-development.html}
  [2]: {relocatable:/documentation/starting-servers-and-agents.html}
  [3]: {relocatable:/documentation/launcher.html}
  [4]: {api_base:}/MeshKeeper.html#Eventing
  [5]: {api_base:}/MeshEventListener.html
  
:raw
  {coderay::java}
    public class EventingTest extends TestCase {

    public static final String EVENT_TOPIC = "examples.eventing";
    private transient Log LOG = LogFactory.getLog(EventingTest.class);
    public static final int ERROR = -11;
    public static final int SAY_HELLO = 0;
    public static final int HELLO = 1;

    @SuppressWarnings("serial")
    public static class EventApp implements Serializable, MeshEventListener {
        private transient Log LOG = LogFactory.getLog(EventApp.class);
        private transient MeshKeeper mk;
        public String name;

        public void startListening() throws Exception {
            mk.eventing().openEventListener(this, EVENT_TOPIC + ".*");
        }

        public void stopListening() throws Exception {
            mk.eventing().closeEventListener(this, EVENT_TOPIC + ".*");
        }

        public void onEvent(MeshEvent event) {
            if (event.getType() == HELLO) {
                LOG.info("Got : " + event.getAttachment() + 
                   " from " + event.getSource());
            } else if (event.getType() == SAY_HELLO) {
                try {
                    mk.eventing().sendEvent(new MeshEvent(HELLO, name, "Hello!"),
                       EVENT_TOPIC + "." + name);
                } catch (Exception e) {
                    LOG.error("Error saying hello", e);
                }
            }
        }

        private void readObject(java.io.ObjectInputStream in) 
        throws IOException, ClassNotFoundException {
            in.defaultReadObject();
            LOG = LogFactory.getLog(EventApp.class + "." + name);
            //Note that we pick up MeshKeeper from the MeshContainer:
            mk = MeshKeeperFactory.getContainerMeshKeeper();

        }
    }

    public void testEventing() throws Exception {

        MeshKeeper mk = MeshKeeperFactory.createMeshKeeper();
        mk.launcher().waitForAvailableAgents(60000);
        HostProperties[] hosts = mk.launcher().getAvailableAgents();

        MeshContainer c1 = mk.launcher().launchMeshContainer(hosts[0].getAgentId());
        MeshContainer c2 = mk.launcher().launchMeshContainer(
                (hosts.length > 1 ? hosts[1] : hosts[0]).getAgentId());

        EventApp a1 = new EventApp();
        a1.name = "machine1";

        EventApp a2 = new EventApp();
        a2.name = "machine2";

        //Let's host them in their containers,
        //Note that we replace the actual references
        //with their proxy counterparts.
        a1 = c1.host(a1.name, a1);
        a2 = c2.host(a2.name, a2);

        //Set up an event listener to wait for the hellos
        final CountDownLatch hellos = new CountDownLatch(2);
        final ArrayList<Exception> errors = new ArrayList<Exception>();
        MeshEventListener listener = new MeshEventListener() {

            public void onEvent(MeshEvent event) {
                switch (event.getType()) {
                case HELLO: {
                    LOG.info("Got : " + event.getAttachment() + " from "
                             + event.getSource());
                    hellos.countDown();
                    break;
                }
                case SAY_HELLO: {
                    break;
                }

                case ERROR:
                default: {
                    Exception e = event.getAttachment();
                    LOG.error("Error from: " + event.getSource(), e);
                    errors.add(e);

                    while (hellos.getCount() > 0) {
                        hellos.countDown();
                    }
                }
                }
            }
        };
        mk.eventing().openEventListener(listener, EVENT_TOPIC + ".*");

        //Start the
        a1.startListening();
        a2.startListening();
        mk.eventing().sendEvent(new MeshEvent(SAY_HELLO, "controller", null),
                                EVENT_TOPIC + ".control");

        hellos.await(10, TimeUnit.SECONDS);
        Thread.sleep(2000);
        assertTrue("There were errors", errors.isEmpty());
        c1.close();
        c2.close();
        
        mk.eventing().closeEventListener(listener);
        
    }
    }
  {coderay}
  
  This yields the following output:
  {coderay::plain}
    INFO  EventingTest: Got : Hello! from machine1
    INFO  EventingTest: Got : Hello! from machine2
    [REMOTE] NBCMACNAUG1: INFO  machine2: Got : Hello! from machine1
    INFO  machine2: Got : Hello! from machine2 
    [REMOTE] NBCMACNAUG1: INFO  machine1: Got : Hello! from machine1
    INFO  machine1: Got : Hello! from machine2 
  {coderay}
:markdown 
  A couple of things to note: 
  * Each process get all of the events even those from themselves.
  * Note how the `Greeter`s use `MeshKeeperFactory.getContainerMeshKeeper()`
    to get at the MeshListener
  * Don't forget to close your event listeners when you're done with them.
    In the above test we simply close the Container which has the same effect.
  

