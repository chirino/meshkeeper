---
# Copyright (C) 2009, Progress Software Corporation and/or its
# subsidiaries or affiliates.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: MeshKeeper
in_menu: true
sort_info: 1
--- name:overview pipeline:haml,tags

%h1 MeshKeeper
%p 
  {project_slogan:}

--- name:content pipeline:haml,tags

.left
  %h1 What is MeshKeeper?
.right
  :markdown 
    **MeshKeeper** is a platform of services that allow Java applications to discover,
    launch, coordinate, and control remote processes across a grid of computers.
    
    A [MeshKeeper deployment][1] consists a control server and multiple launch agents. 
    A deployment can scale up to any number of computers on a cloud or grid or it 
    can scale down to just running wholly embedded in your Java application.
    
    To get started, see our user guides:
    
    *  [Getting Started with Embedded Development][2]
    *  [Getting Started with Starting Standalone Servers and Agents][3]
    
    [1]: {relocatable:/documentation/deployment-topology.html}
    [2]: {relocatable:/documentation/embedded-development.html}
    [3]: {relocatable:/documentation/starting-servers-and-agents.html}

.left
  %h1 MeshKeeper Services
  %br
  %img{:src=>"images/diagram-1.png", :style=>"float:right"}      
.right
  :markdown 
    [Process Launching][1]: Allows clients to start, monitor, and terminate processes across all the computers
    that have the MeshKeeper Launcher Agent installed.  The Launcher also allows you to 
    easily remotely execute your `Serializable` `Runnable` objects on remote box.  It 
    takes care of properly replicating your application's `CLASSPATH` to the launched 
    JVM.  For example:
    [1]: {relocatable:/documentation/launcher.html}
    
  :raw
    {coderay::java}
    Executor executor = 
            mk.getLauncher().createRemoteExecutor("fastbox");
    executor.execute(runnable);
    {coderay}   
         
  :markdown 
    [Remoting][1]: Provides easy mechanisms for enabling remote method invocation. While traditional java rmi 
    is supported, MeshKeeper also provides additional mechanismsfor distributing objects that don't implement 
    the Remote interface (or its irritating RemoteExceptions).  Best of all, unlike traditional RMI, remote
    objects don't open TCP ports, all method invocations are routed via the MeshKeeper control server.
    [1]: {relocatable:/documentation/remoting.html}

  :markdown 
    [Eventing][1]: Provides an simple topic based eventing API, which can be used to coordinate the activities 
    of the distributed processes.
    [1]: {relocatable:/documentation/eventing.html}

  :markdown 
    [Data Registry][1]: Provides a central location to store/retrieve remote objects and data.  It uses a file system 
    like tree structure but unlike file systems, the `Registry` allows you to watch for changes.  
    This flexible mechanism makes sharing of data between launched process a breeze. 
    [1]: {relocatable:/documentation/registry.html}

  :markdown 
    [Artifact Repository][1]: Allows you to stage artifacts which are subsequently used by launch agents 
    to download artifacts such as jvms, configuration files, and jars from http, ftp, webdav, 
    and file based repositories.
    [1]: {relocatable:/documentation/repository.html}




