---
# Copyright (C) 2009, Progress Software Corporation and/or its
# subsidiaries or affiliates.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: MeshKeeper
in_menu: true
sort_info: 1
--- name:overview pipeline:haml,tags

%h1 MeshKeeper
{project_slogan:}

--- name:content pipeline:haml,tags

.left
  %h1 What is MeshKeeper?
.right
  %p
    %b MeshKeeper
    Provides utilities for launching and controlling arbitrary scripts,
    executables, java processes and objects within a mesh of computers.
    
  %p
    %b MeshKeeper
    Provides
    %ul
      %li Distributed resource management. Allows launch agents to download artifacts such as jvms,
      configuration files, and jars from http, ftp, webdav, and file based repositories.
      %li Distributed classloaders. When launching java processes you can expose your local classes
      for the launched java application. This is particularly useful when MeshKeeper is used as a 
      testing framework as it allows easy access to locall build classes that are not in a repository.
      %li An easy Distributed Registry API. MeshKeeper allows you to add both Seriailizable object, or
      raw data in a tree like structure that all entities in the mesh can access. This flexible mechanism
      makes sharing of data between launched process a breeze. 
      %li Built in Remoting support. MeshKeeper provides easy mechanisms for enabling remote method 
      invocation. While traditional java rmi is supported, MeshKeeper also provides additional mechanisms
      for distributing objects that don't implement the Remote interface (or its irritating RemoteExceptions)
      %li Built in Eventing support. MeshKeeper provides an simple topic based eventing api, which can
      be used to coordinate the activities of the distributed processes. 
    
.left
  %h1 Launching A MeshKeeper Coordinator Server
.right
  %p
    First
    %a{:href=>'download.html'} download and install MeshKeeper
    then you can launch the coordination server from the command line as follows:
    
  :plain
    {coderay::plain}
    TODO MeshKeeper server script
    {coderay}

.left
  %h1 Launching A MeshKeeper Agent
.right
  %p
  TODO
  
.left
  %h1 Testing the agent
.right
  %p
  TODO